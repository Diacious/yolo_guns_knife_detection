import streamlit as st
import requests
import os
from PIL import Image
from io import BytesIO
from dotenv import load_dotenv
import json
import numpy as np

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
PORT = int(os.getenv("PORT", "8001"))
BACKEND_URL = os.getenv("BACKEND_URL", f"http://localhost:{PORT}/")

st.set_page_config(page_title="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ YOLOv11", layout="centered")

st.title("üîç –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ YOLOv11")
st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤.")

# –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
option = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–í–∏–¥–µ–æ", "–ö–∞–º–µ—Ä–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"))

# ------------------- –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô -------------------
if option == "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
    st.header("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        st.image(uploaded_file, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
        if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                files = {"file": (uploaded_file.name, uploaded_file, uploaded_file.type)}
                response = requests.post(f"{BACKEND_URL}/process_image/", files=files)
                if response.status_code == 200:
                    # –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è.
                    image = Image.open(BytesIO(response.content))
                    st.image(image, caption="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
                    temp_filename = f"processed_{uploaded_file.name}"
                    with open(temp_filename, "wb") as f:
                        f.write(response.content)
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                        data=response.content,
                        file_name=temp_filename,
                        mime="image/jpeg"
                    )
                    os.remove(temp_filename)
                else:
                    st.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# ------------------- –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û -------------------
elif option == "–í–∏–¥–µ–æ":
    st.header("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ", type=["mp4", "mov", "avi"])
    if uploaded_file is not None:
        st.video(uploaded_file)
        if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ"):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ..."):
                files = {"file": (uploaded_file.name, uploaded_file, uploaded_file.type)}
                response = requests.post(f"{BACKEND_URL}/process_video/", files=files)
                if response.status_code == 200:
                    temp_filename = f"processed_{uploaded_file.name}"
                    with open(temp_filename, "wb") as f:
                        f.write(response.content)
                    st.video(temp_filename)
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ",
                        data=response.content,
                        file_name=temp_filename,
                        mime="video/mp4"
                    )
                    os.remove(temp_filename)
                else:
                    st.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.")

# ------------------- –ó–ê–•–í–ê–¢ –ò–ó –ö–ê–ú–ï–†–´ -------------------
elif option == "–ö–∞–º–µ—Ä–∞":
    st.header("–ó–∞—Ö–≤–∞—Ç —Å –∫–∞–º–µ—Ä—ã")
    # st.camera_input –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Streamlit.
    captured_image = st.camera_input("–°–¥–µ–ª–∞–π—Ç–µ —Å–Ω–∏–º–æ–∫")
    if captured_image is not None:
        st.image(captured_image, caption="–°–Ω–∏–º–æ–∫", use_column_width=True)
        if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–Ω–∏–º–æ–∫"):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–∏–º–∫–∞..."):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
                bytes_data = captured_image.getvalue()
                files = {"file": ("captured.jpg", bytes_data, "image/jpeg")}
                response = requests.post(f"{BACKEND_URL}/process_image/", files=files)
                if response.status_code == 200:
                    image = Image.open(BytesIO(response.content))
                    st.image(image, caption="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
                    temp_filename = "processed_captured.jpg"
                    with open(temp_filename, "wb") as f:
                        f.write(response.content)
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                        data=response.content,
                        file_name=temp_filename,
                        mime="image/jpeg"
                    )
                    os.remove(temp_filename)
                else:
                    st.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# ------------------- –°–¢–ê–¢–ò–°–¢–ò–ö–ê -------------------
elif option == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")
    with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏..."):
        response = requests.get(f"{BACKEND_URL}/history/")
        if response.status_code == 200:
            history = response.json()
            if not history:
                st.info("–ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            else:
                total_requests = len(history)
                total_images = sum(1 for entry in history if "detections" in entry.get("result", {}))
                total_videos = sum(1 for entry in history if "video_detections" in entry.get("result", {}))

                st.write(f"**–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:** {total_requests}")
                st.write(f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** {total_images}")
                st.write(f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ:** {total_videos}")

                # –í—ã–≤–æ–¥–∏–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–∞—Å—Ö–æ–¥ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
                total_processing_time = sum(entry.get("processing_time", 0) for entry in history)
                avg_processing_time = total_processing_time / total_requests if total_requests > 0 else 0
                st.write(f"**–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {avg_processing_time:.2f} —Å–µ–∫")

                total_memory_used = sum(entry.get("memory_used", 0) for entry in history)
                avg_memory_used = total_memory_used / total_requests if total_requests > 0 else 0
                st.write(f"**–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –ø–∞–º—è—Ç–∏:** {avg_memory_used:.2f} –ú–ë")

                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
                all_label_stats = {}
                for entry in history:
                    label_stats = entry.get("label_stats", {})
                    for label, stats in label_stats.items():
                        if label not in all_label_stats:
                            all_label_stats[label] = {"count": 0, "total_confidence": 0}
                        all_label_stats[label]["count"] += stats.get("count", 0)
                        all_label_stats[label]["total_confidence"] += stats.get("avg_confidence", 0) * stats.get("count", 0)

                if all_label_stats:
                    st.subheader("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ –º–µ—Ç–∫–∞–º")
                    for label, stats in all_label_stats.items():
                        count = stats["count"]
                        avg_conf = stats["total_confidence"] / count if count > 0 else 0
                        st.write(f"**–ú–µ—Ç–∫–∞ {label}:** {count} –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π (–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_conf:.2f})")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞.")

# ------------------- –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê -------------------
elif option == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç":
    st.header("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
    report_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞", ("PDF", "Excel"))
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."):
            response = requests.get(f"{BACKEND_URL}/report/?report_type={report_type.lower()}")
            if response.status_code == 200:
                report_filename = f"report.{report_type.lower()}"
                st.success("–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                    data=response.content,
                    file_name=report_filename,
                    mime="application/octet-stream"
                )
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç.")
